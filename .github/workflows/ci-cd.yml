name: PWA CI/CD Workflow

# Desencadenadores del flujo de trabajo
on:
  push:
    branches:
      - main
      - develop
      - pruebas
      - test
      - release/*
  pull_request:
    branches:
      - main
      - release/*

# Configuración de los trabajos
jobs:
  build-and-test:
    name: Build and Test PWA MEF
    # El flujo se ejecutará en un entorno Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configuración de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16 

      # Paso 3: Configuración del caché de dependencias
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Paso 4: Instalación de dependenciaas
      - name: Install dependencies
        run: npm install
    
      # Paso 5: Iniciar el servidor de desarrollo
      - name: Start Development Server
        run: npm start &
        env:
          PORT: 5173

      # Paso 6: Asegurarse de que hay tiempo suficiente para iniciar el servidor
      - name: Wait for Server Initialization
        run: sleep 10 
       
      # Paso 7: Esperar a que el servidor esté disponible antes de ejecutar Cypress
      - name: Wait for Server to be Ready
        run: npx wait-on http://localhost:5173 --timeout 30000

      # Paso 8: Ejecutar pruebas unitarias con cobertura con Jest
      - name: Run Unit Tests with Coverage
        run: npx jest --coverage --passWithNoTests

      # Paso 6: Ejecutar pruebas unitarias con Jasmine
      - name: Run Unit Tests with Jasmine
        run: npm run test

      # Paso 10: Etapa de Pruebas Instalar Cypress
      - name: Install Cypress
        run: npm install cypress --save-dev
      
      # Paso 11: Listar los archivos de especificaciones de Cypress
      - name: List Cypress Spec Files 
        run: ls cypress/e2e/

      # Paso 12: Ejecutar las pruebas E2E con Cypress
      - name: Run E2E Tests with Cypress
        run: npx cypress run

      # Paso 13: Instalar Playwright
      - name: Install Playwright
        run: npx playwright install

      # Paso 14: Ejecutar pruebas de integración con Playwright
      - name: Run Playwright Integration Tests
        run: npx playwright test     
         
      # Paso 15: Construir el proyecto
      - name: Build Project
        run: npm run build
      
      #proceso de monirero
      - name: Set environment variables
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          echo "STAGING_TOKEN=${{ secrets.STAGING_TOKEN }}" >> $GITHUB_ENV
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV
            
  # deploy:
  #   name: Deploy PWA MEF
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/pruebas' || github.ref == 'refs/heads/test' || startsWith(github.ref, 'refs/heads/release/')
  #   runs-on: ubuntu-latest
  #   needs: build-and-test

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js environment
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '16'

  #     - name: Install Dependencies
  #       run: npm install

  #     - name: Deploy to Vercel
  #       env:
  #         VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  #       run: npx vercel --prod --yes --token $VERCEL_TOKEN --name mi-enfermera-favorita
  
  # notifications:
  #   name: Slack Notify Results
  #   runs-on: ubuntu-latest
  #   needs: 
  #     - build-and-test
  #     - deploy

  #   steps:
  #     # Notificar éxito en Slack si todo fue exitoso
  #     - name: Notify Success on Slack
  #       if: success()
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' \
  #         --data '{"text":"✅ Todo el pipeline se completó con éxito."}' \
  #         $SLACK_WEBHOOK_URL

  #     # Notificar fallo en Slack si hubo algún error
  #     - name: Notify Failure on Slack
  #       if: failure()
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' \
  #         --data '{"text":"❌ Ocurrió un error en el pipeline."}' \
  #         $SLACK_WEBHOOK_URL
name: PWA CI/CD Workflow

# Desencadenadores del flujo de trabajo
on:
  push:
    branches:
      - main
      - develop
      - pruebas # Reemplaza con las ramas que deseas monitorear
  pull_request:
    branches:
      - main
      - develop

# Configuración de los trabajos
jobs:
  build-and-test:
    name: Build and Test React MEF
    # El flujo se ejecutará en un entorno Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Paso 2: Configuración de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16 # Ajusta la versión según tu proyecto

      # Paso 3: Configuración del caché de dependencias
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Paso 4: Instalación de dependenciaas
      - name: Install dependencies
        run: npm install

      - name: Set environment variables
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          echo "STAGING_TOKEN=${{ secrets.STAGING_TOKEN }}" >> $GITHUB_ENV
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV

      - name: Build Project
        run: npm run build
    
      - name: Run Unit Tests with Coverage
        run: npx jest --coverage --passWithNoTests
      

      # Iniciar el servidor de desarrollo
      - name: Start Development Server
        run: npm start &
        env:
          PORT: 5173

        # Asegurarse de que hay tiempo suficiente para iniciar el servidor
      - name: Wait for Server Initialization
        run: sleep 10
       
        # Esperar a que el servidor esté disponible antes de ejecutar Cypress
      - name: Wait for Server to be Ready
        run: npx wait-on http://localhost:5173 --timeout 30000

        #Etapa de Pruebas 
      - name: Install Cypress
        run: npm install cypress --save-dev

      - name: List Cypress Spec Files 
        run: ls cypress/e2e/

      - name: Run E2E Tests with Cypress
        run: npx cypress run   

       # Notificar éxito en Slack
      - name: Notify Success on Slack
        if: success() # Este paso solo se ejecuta si todos los pasos anteriores tuvieron éxito
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"¡Construcción y pruebas completadas con éxito!"}' \
          $SLACK_WEBHOOK_URL

      # Notificar fallo en Slack
      - name: Notify Failure on Slack
        if: failure() # Este paso solo se ejecuta si algún paso anterior falló
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ Error en la construcción o pruebas del proyecto."}' \
          $SLACK_WEBHOOK_URL
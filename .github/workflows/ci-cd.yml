name: PWA CI/CD Workflow

# Desencadenadores del flujo de trabajo
on:
  push:
    branches:
      - main
      - develop
      - pruebas
      - test
      - release/*
  pull_request:
    branches:
      - main
      - release/*

# Configuración de los trabajos
jobs:
  build-and-test:
    name: Build and Test PWA MEF
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3
        # Este paso obtiene el código del repositorio para trabajar con él

      # Paso 2: Configuración de Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16 # Ajusta la versión de Node.js según la versión de tu proyecto
        # Se configura el entorno de Node.js para que las dependencias se instalen correctamente

      # Paso 3: Configuración del caché de dependencias
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
        # El caché ayuda a acelerar el proceso de instalación de dependencias al reutilizar los archivos existentes

      # Paso 4: Instalación de dependencias
      - name: Install dependencies
        run: npm install
        # Instalamos las dependencias del proyecto utilizando npm

      # Paso 5: Instalación de Cypress
      - name: Install Cypress
        run: npm install cypress --save-dev
        # Instalamos Cypress para realizar las pruebas E2E

      # Paso 6: Listado de archivos de prueba de Cypress
      - name: List Cypress Spec Files
        run: ls cypress/e2e/
        # Listamos los archivos de pruebas de Cypress para verificar que estén en el lugar correcto

      # Paso 7: Ejecución de pruebas E2E con Cypress
      - name: Run E2E Tests with Cypress
        run: npx cypress run
        # Ejecutamos las pruebas E2E con Cypress para verificar la funcionalidad completa de la aplicación

      # Paso 8: Ejecución de pruebas unitarias con cobertura
      - name: Run Unit Tests with Coverage
        run: npx jest --coverage --passWithNoTests
        # Ejecutamos las pruebas unitarias con Jest y generamos un reporte de cobertura de código

      # Paso 9: Iniciar el servidor de desarrollo
      - name: Start Development Server
        run: npm start &
        env:
          PORT: 5173
        # Iniciamos el servidor de desarrollo en segundo plano para simular el entorno de producción

      # Paso 10: Asegurarse de que hay tiempo suficiente para iniciar el servidor
      - name: Wait for Server Initialization
        run: sleep 10
        # Esperamos 10 segundos para que el servidor se inicie correctamente

      # Paso 11: Esperar a que el servidor esté disponible antes de ejecutar Cypress
      - name: Wait for Server to be Ready
        run: npx wait-on http://localhost:5173 --timeout 30000
        # Usamos `wait-on` para asegurarnos de que el servidor esté listo antes de continuar con las pruebas

      # Paso 12: Build del proyecto
      - name: Build Project
        run: npm run build
        # Generamos la versión de producción del proyecto con `npm run build`

      # Paso 13: Configuración de variables de entorno para monitoreo
      - name: Set environment variables
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          echo "STAGING_TOKEN=${{ secrets.STAGING_TOKEN }}" >> $GITHUB_ENV
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> $GITHUB_ENV
        # Establecemos las variables de entorno necesarias para el monitoreo y otras configuraciones

  deploy:
    name: Deploy PWA MEF
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/pruebas' || github.ref == 'refs/heads/test' || startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Paso 14: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3
        # Este paso obtiene nuevamente el código del repositorio para el despliegue

      # Paso 15: Configuración de Node.js para el despliegue
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'
        # Configuramos nuevamente el entorno de Node.js para el despliegue

      # Paso 16: Instalación de dependencias en el entorno de despliegue
      - name: Install Dependencies
        run: npm install
        # Instalamos las dependencias necesarias para el despliegue

      # Paso 17: Despliegue a Vercel
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: npx vercel --prod --yes --token $VERCEL_TOKEN --name mi-enfermera-favorita
        # Desplegamos la aplicación a Vercel en producción usando el token de autenticación

  # notifications:
  #   name: Slack Notify Results
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-and-test
  #     - deploy

  #   steps:
  #     # Notificar éxito en Slack si todo fue exitoso
  #     - name: Notify Success on Slack
  #       if: success()
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' \
  #         --data '{"text":"✅ Todo el pipeline se completó con éxito."}' \
  #         $SLACK_WEBHOOK_URL

  #     # Notificar fallo en Slack si hubo algún error
  #     - name: Notify Failure on Slack
  #       if: failure()
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' \
  #         --data '{"text":"❌ Ocurrió un error en el pipeline."}' \
  #         $SLACK_WEBHOOK_URL
